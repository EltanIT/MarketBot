from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.Enums import DeliveryMethod, OrderStatus
from db import order_requests, user_requests


main_reply = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–¢–æ–≤–∞—Ä—ã")],
    [KeyboardButton(text="–ü–æ–º–æ—â—å üÜò")],
    [KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìã")]
],
resize_keyboard=True)



cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
])

cancel_reply = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
])

end_call = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä ‚ùå")]
])

about_product = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å", callback_data="about_product_buy"), InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="about_product_cancel")]
])

before_ordering_change = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–æ–ø. –∞–ø–ø–∞—Ä–∞—Ç—É—Ä–∞", callback_data="before_ordering_additionally")],
    [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°", callback_data="before_ordering_not")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="before_ordering_back")]
])

optionally_product_buy = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="selected_optionally_buy")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="selected_optionally_back")]
])


redact_order = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–§–ò–û", callback_data="redact_order_fio")],
    [InlineKeyboardButton(text="–ê–¥—Ä–µ—Å", callback_data="redact_order_address")],
    [InlineKeyboardButton(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="redact_order_phone")],
    [InlineKeyboardButton(text="–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="redact_order_delivery")],
    [InlineKeyboardButton(text="–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ ‚úÖ", callback_data="redact_order_ok")],
])


create_order = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–î–∞", callback_data="create_order_yes")],
    [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="create_order_not")]
])


order_canceled = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="active_order_cancel")],
    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="active_order_back")]
])


rating_inline = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚≠ê", callback_data="rating_comment_1")],
    [InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data="rating_comment_2")],
    [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data="rating_comment_3")],
    [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_comment_4")],
    [InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_comment_5")],
    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="rating_comment_cancel")]
])


button_per_page = 16
async def orders_inline(user_id: int, page_num: int):

    user = await user_requests.getUserByUserId(user_id)

    if not user:
        return

    orders = await order_requests.getAllUserOrdersByUserId(user.id)

    orders = sorted(
        orders,
        key = lambda order: order.status.value[1], 
        reverse=False
    )

    start_index = page_num * button_per_page
    end_index = min(start_index + button_per_page, len(orders))

    orders = orders[start_index:end_index]



    keyboard = InlineKeyboardBuilder()

    for order in orders:
        keyboard.add(InlineKeyboardButton(text=f'{order.id} {order.status.value[2]}', callback_data=f"order_{order.id}"))
    keyboard.adjust(2)

    keyboard.row(
        InlineKeyboardButton(text=f'<< –ù–∞–∑–∞–¥', callback_data= f"page_{page_num-1}"),
        InlineKeyboardButton(text=f'–î–∞–ª–µ–µ >>', callback_data=f"page_{page_num+1}")
    )    
    
    return keyboard.as_markup()


async def delivery_methods():

    methods = [e for e in DeliveryMethod]

    if not methods:
        return


    keyboard = InlineKeyboardBuilder()

    for method in methods:
        keyboard.add(InlineKeyboardButton(text = str(method.value) , callback_data=f"delivery_{method.name}"))
    return keyboard.adjust(1).as_markup()



async def about_delivery_inline(user_id: int):

    orders = await order_requests.getAllUserOrdersByUserId(user_id)


    keyboard = InlineKeyboardBuilder()

    for order in orders:
        keyboard.add(InlineKeyboardButton(text=str(order.id), callback_data=f"order_{order.id}"))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f"cancel"))
    return keyboard.adjust(2).as_markup()



cancel_reply = ReplyKeyboardMarkup(
    resize_keyboard = True,
    keyboard = [
        [KeyboardButton(text = '–û—Ç–º–µ–Ω–∞')]
    ]
)


async def cancel_inline(data: str, text: str = "–û—Ç–º–µ–Ω–∞"):

    keyboard = InlineKeyboardBuilder()

    data = f"{data}_cancel"
    print(data)

    keyboard.add(InlineKeyboardButton(text=text, callback_data=data))
    return keyboard.adjust(1).as_markup()




