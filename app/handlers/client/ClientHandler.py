from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from app.config import bot
from aiogram.filters import Command

import app.kb.client_keyboards as kb
from app.kb.common import products_inline
from app.kb.employee_keyboards import help_inline, main_reply, end_call
from app.ClientStates import SelectProduct, EmployeeCall, RedactOldOrder

from db import employee_requests, user_requests
from .common import searchBusyEmployeeForUserId, sendMessageEmployee


router = Router(name=__name__)


@router.callback_query(F.data == 'cancel')
async def cancel(callback: types.CallbackQuery, state: FSMContext):
    
    await state.clear()

    await clearAllClientStates(callback.from_user.id)

    await state.set_state(SelectProduct.Product)

    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                         reply_markup = await products_inline(isBack = False))   

@router.message(F.text == '–û—Ç–º–µ–Ω–∞')
async def cancel(message: types.Message, state: FSMContext):
    
    message1 = await message.answer('–û–ü–ï–†–ê–¶–ò–Ø –û–¢–ú–ï–ù–ï–ù–ê',
                              reply_markup = kb.main_reply)
    
    await state.clear()

    await clearAllClientStates(message.from_user.id)

    await state.set_state(SelectProduct.Product)

    await message.delete()

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                         reply_markup = await products_inline(isBack = False))
    


@router.message(EmployeeCall.DescriptionProduct)
async def help_msg(message: types.Message, state: FSMContext):
    
    employee = await employee_requests.getEmployeeWithActiveClientByClientId(message.from_user.id)

    if employee:
       await employee_requests.updateActiveClientEmployee(employee.id, None)
    
    text = message.text
    
    await state.set_state(EmployeeCall.Call)

    await message.answer('–ú—ã —É–∂–µ –∏—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∞–º –ø–æ–º–æ—á—å.\n\n' +
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ..',
                          reply_markup = kb.cancel,
                          reply_to_message_id = message.message_id)
  

    employee = await searchBusyEmployeeForUserId(message.from_user.id, message.from_user.username)

    if not employee:
      return
    
    user = await user_requests.getUserById(employee.user_id)
    if not user:
        await state.clear()
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n' +
                         '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ :)')
        return


    from_user = message.from_user
    message = await sendMessageEmployee(
       chat_id = user.user_id,
       text = text,
       reply_markup = end_call
    )

    await sendMessageEmployee(
       chat_id = user.user_id,
       text = 
        f'–ö–ª–∏–µ–Ω—Ç—É @{from_user.username} –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞\n\n' +
        f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {from_user.id}\n' +
        f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {from_user.first_name} {from_user.last_name}',
       message_id = message.message_id,
       reply_markup = help_inline     
    )
    
@router.message(F.text == '–ü–æ–º–æ—â—å üÜò')
async def help(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(EmployeeCall.DescriptionProduct)

    await message.answer('–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ –∏–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä, —Ç–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º!\n\n' +
                         '–û–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.',
                           reply_markup = kb.cancel)
    
@router.message(F.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìã')
async def my_orders(message: types.Message, state: FSMContext):
    await state.clear()

    await state.set_state(RedactOldOrder.OrderId)
    await state.update_data(page_num = 0)

    message = await message.answer(f'–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:',
                           reply_markup = await kb.orders_inline(message.from_user.id, 0))
    
    await state.update_data(main_msg = message.message_id)
    
@router.message(F.text == '–¢–æ–≤–∞—Ä—ã')
async def my_orders(message: types.Message, state: FSMContext):
    await state.clear()

    await clearAllClientStates(message.from_user.id)

    await state.set_state(SelectProduct.Product)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                         reply_markup = await products_inline(isBack = False))
    




@router.message(F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä ‚ùå')
async def call_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    
    employee = await employee_requests.getEmployeeWithActiveClientByClientId(message.from_user.id)

    if employee:
      await employee_requests.updateActiveClientEmployee(employee.id, None)
      await employee_requests.updateActiveOrderEmployee(employee.id, None)
      await employee_requests.updateBusyEmployee(employee.id, False)

    await clearAllClientStates(message.from_user.id)
    
   

    await state.set_state(SelectProduct.Product)

    await message.answer('–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω', reply_markup=kb.main_reply)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                         reply_markup = await products_inline(isBack = False))
    
    
    employee_user = await user_requests.getUserById(employee.id)
    await bot.send_message(employee_user.user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥, –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–∫–∞–∑", reply_markup=await main_reply(employee_user.user_id))



@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    print(f'{message.from_user}')
    await state.clear()

    await clearAllClientStates(message.from_user.id)

    await state.set_state(SelectProduct.Product)

    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n'+
                         '–Ø —Ä–æ–±–æ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ "–ß–∫–∞–ª–æ–≤—Å–∫–∏–µ –ë–µ—Ä–∫—É—Ç—ã"ü¶Ö.' +
                         '–ü–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –í–∞–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.üòã\n\n' +
                         '—Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @failxz',
                           reply_markup = kb.main_reply)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                         reply_markup = await products_inline(isBack = False))
    


@router.message()
async def remove_message(message: types.Message, state: FSMContext):
  print(message)
  await message.delete()



async def clearAllClientStates(user_id):
   user = await user_requests.getUserByUserId(user_id)
   if user:
      await user_requests.updateUserIsSearchEmployee(user.id, False)
    
